# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-l0i4hYlq-0wN7h2D114rrpxmkzygB6G
"""

import os
import numpy as np
import cv2
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

data_path1 = '/content/drive/My Drive/imagesa'
data_path2 = '/content/drive/My Drive/DALL-E'

def build_mesoNet(input_shape=(224, 224, 3)):
    model = Sequential()

    model.add(Conv2D(8, (3, 3), padding='same', activation='relu', input_shape=input_shape))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(8, (5, 5), padding='same', activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(16, (5, 5), padding='same', activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(16, (5, 5), padding='same', activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Flatten())
    model.add(Dropout(0.5))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))  # Sigmoid dla klasyfikacji binarnej

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    return model

def load_images_from_folder(folder, label):
    images = []
    labels = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        if os.path.isfile(img_path):
            img = load_img(img_path, target_size=(224, 224))  # użycie rozmiaru 224x224 dla VGG16 i MesoNet
            img = img_to_array(img)
            images.append(img)
            labels.append(label)
    return images, labels

images1, labels1 = load_images_from_folder(data_path1, 0)  # midjourney - etykieta 0
images2, labels2 = load_images_from_folder(data_path2, 1)  # artyści - etykieta 1

# Łączenie danych
images = np.array(images1 + images2)
labels = np.array(labels1 + labels2)

# Normalizacja obrazów
images = images / 255.0

# Konwersja etykiet na formę binarną (one-hot encoding niepotrzebny dla klasyfikacji binarnej)
labels = np.array(labels)

# Podział danych na zestawy treningowy i testowy
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.3, random_state=42)

meso_model = build_mesoNet(input_shape=(224, 224, 3))

# Trenowanie modelu
history = meso_model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

# Ewaluacja modelu
y_pred = meso_model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int)  # Konwersja wyników na 0 lub 1

# Raport klasyfikacji
print(classification_report(y_test, y_pred))

# Plot accuracy
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy During Training')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()